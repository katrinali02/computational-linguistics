import math
from scipy.stats import spearmanr
from embeddings import Embeddings


def read_simlex(embeddings, infile = 'data/SimLex-999.txt'):
    simlex = {}
    for idx, item in enumerate(open(infile)):
        if idx == 0: continue
        w1, w2, pos, val = item.strip().lower().split('\t')[0:4]
        if pos != 'n': continue
        if not (w1 in embeddings and w2 in embeddings): continue
        simlex[(w1,w2)] = float(val) / 10.0
    return simlex

def read_wordsim(embeddings, infile = 'data/wordsim353_set2.tab'):
    wordsim = {}
    for idx, item in enumerate(open(infile)):
        if idx == 0: continue
        w1, w2, val = item.strip().lower().split('\t')[0:3]
        if not (w1 in embeddings and w2 in embeddings): continue
        wordsim[(w1,w2)] = float(val) / 10.0
    return wordsim

def score_word_dataset(embeddings, dataset):
    """
    Calculate Spearman's Rho for word similarity on the given dataset.

    The dataset is obtained from the read_simlex or read_wordsim functions.

    To do this, collect lists of the gold similarity values and the
    model values generated by word embedding similarity, and pass
    both lists to the spearmanr function. The spearmanr function
    has two return values, you want to return only the first one.

    Parameters
    ----------
    dataset : dict of the form { (word, word) : similarity_val }
        WordSim-353 or SimLex-999 dataset.

    Returns
    -------
    float
        The Spearman's Rho ranked correlation coefficient between 
        the emeddings and the human judgments.
    """
    # >>> YOUR ANSWER HERE
    
    gold_sim_vals = []
    model_vals  = []

    for word_pair in list(dataset):
        gold_val = dataset[word_pair]
        model_val = embeddings.cosine_similarity(word_pair[0], word_pair[1])
        
        gold_sim_vals.append(gold_val)
        model_vals.append(model_val)

    spearman_r = spearmanr(gold_sim_vals, model_vals)[0]
    
    return spearman_r

    # >>> END YOUR ANSWER



if __name__ == '__main__':
    embeddings = Embeddings()    

    simlex = read_simlex(embeddings)
    wordsim = read_wordsim(embeddings)

    print('WordSim-353 score:', score_word_dataset(embeddings, wordsim))
    print('SimLex-999 score:', score_word_dataset(embeddings, simlex))
    
